# Fichier: .github/workflows/run-tests.yml

name: Python CI - Run Tests and Publish Results

# 1. Déclencheur : Quand exécuter ce workflow ?
on:
  push:
    branches: [ main ] # S'exécute à chaque push sur la branche 'main'
  pull_request:
    branches: [ main ] # S'exécute aussi sur les Pull Requests vers 'main'
  workflow_dispatch: # Permet de lancer manuellement depuis l'interface GitHub

jobs:
  # Un seul "job" (tâche) dans notre workflow, nommé 'build-and-test'
  build-and-test:
    runs-on: ubuntu-latest # 2. La machine : une version récente d'Ubuntu Linux

    # 3. Les services externes : notre base de données
    services:
      mariadb:
        image: mariadb:10.6
        ports:
          - 3306:3306
        env:
          # On définit les variables d'environnement pour le service
          MARIADB_ROOT_PASSWORD: supersecretpassword
          MARIADB_DATABASE: analyste_augmente_test
        # Options pour s'assurer que la BDD est prête
        options: >-
          --health-cmd="mysqladmin ping -h localhost -p${{ env.MARIADB_ROOT_PASSWORD }}"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    # 4. Les étapes (la recette)
    steps:
      # Étape 1: Récupérer notre code
      - name: Check out repository code
        uses: actions/checkout@v3

      # Étape 2: Installer Python
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Étape 3: Installer les dépendances
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Étape 4: Exécuter les tests
      - name: Run Pytest and generate report
        # On définit la variable d'environnement que notre conftest.py va lire
        env:
          DB_TEST_URL: mysql+pymysql://root:supersecretpassword@127.0.0.1:3306/analyste_augmente_test
        run: pytest -v --junitxml="report.xml"


      # Étape 5: Publier les résultats sur Xray
      - name: Publish results to Xray
        # Cette étape ne s'exécute que si les précédentes ont réussi
        if: success()
        run: python publish_xray_results.py
        env:
          # On passe nos secrets au script
          XRAY_CLIENT_ID: ${{ secrets.XRAY_CLIENT_ID }}
          XRAY_CLIENT_SECRET: ${{ secrets.XRAY_CLIENT_SECRET }}